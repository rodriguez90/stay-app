/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/departamentOperationsMappers";
import * as Parameters from "../models/parameters";
import { ConcordiaApiContext } from "../concordiaApiContext";

/** Class representing a DepartamentOperations. */
export class DepartamentOperations {
  private readonly client: ConcordiaApiContext;

  /**
   * Create a DepartamentOperations.
   * @param {ConcordiaApiContext} client Reference to the service client.
   */
  constructor(client: ConcordiaApiContext) {
    this.client = client;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param [options] The optional parameters
   * @returns Promise<Models.DepartamentListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DepartamentListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.Departament[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Departament[]>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Departament[]>, callback?: msRest.ServiceCallback<Models.Departament[]>): Promise<Models.DepartamentListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DepartamentListResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.DepartamentCreateResponse>
   */
  create(data: Models.Departament, options?: msRest.RequestOptionsBase): Promise<Models.DepartamentCreateResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  create(data: Models.Departament, callback: msRest.ServiceCallback<Models.Departament>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create(data: Models.Departament, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Departament>): void;
  create(data: Models.Departament, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Departament>, callback?: msRest.ServiceCallback<Models.Departament>): Promise<Models.DepartamentCreateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.DepartamentCreateResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param id A unique integer value identifying this departament.
   * @param [options] The optional parameters
   * @returns Promise<Models.DepartamentReadResponse>
   */
  read(id: number, options?: msRest.RequestOptionsBase): Promise<Models.DepartamentReadResponse>;
  /**
   * @param id A unique integer value identifying this departament.
   * @param callback The callback
   */
  read(id: number, callback: msRest.ServiceCallback<Models.Departament>): void;
  /**
   * @param id A unique integer value identifying this departament.
   * @param options The optional parameters
   * @param callback The callback
   */
  read(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Departament>): void;
  read(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Departament>, callback?: msRest.ServiceCallback<Models.Departament>): Promise<Models.DepartamentReadResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      readOperationSpec,
      callback) as Promise<Models.DepartamentReadResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param [options] The optional parameters
   * @returns Promise<Models.DepartamentUpdateResponse>
   */
  update(data: Models.Departament, id: number, options?: msRest.RequestOptionsBase): Promise<Models.DepartamentUpdateResponse>;
  /**
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param callback The callback
   */
  update(data: Models.Departament, id: number, callback: msRest.ServiceCallback<Models.Departament>): void;
  /**
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(data: Models.Departament, id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Departament>): void;
  update(data: Models.Departament, id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Departament>, callback?: msRest.ServiceCallback<Models.Departament>): Promise<Models.DepartamentUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        id,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DepartamentUpdateResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param [options] The optional parameters
   * @returns Promise<Models.DepartamentUpdate1Response>
   */
  update1(data: Models.Departament, id: number, options?: msRest.RequestOptionsBase): Promise<Models.DepartamentUpdate1Response>;
  /**
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param callback The callback
   */
  update1(data: Models.Departament, id: number, callback: msRest.ServiceCallback<Models.Departament>): void;
  /**
   * @param data
   * @param id A unique integer value identifying this departament.
   * @param options The optional parameters
   * @param callback The callback
   */
  update1(data: Models.Departament, id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Departament>): void;
  update1(data: Models.Departament, id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Departament>, callback?: msRest.ServiceCallback<Models.Departament>): Promise<Models.DepartamentUpdate1Response> {
    return this.client.sendOperationRequest(
      {
        data,
        id,
        options
      },
      update1OperationSpec,
      callback) as Promise<Models.DepartamentUpdate1Response>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param id A unique integer value identifying this departament.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id A unique integer value identifying this departament.
   * @param callback The callback
   */
  deleteMethod(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id A unique integer value identifying this departament.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "departament",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Departament"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "departament",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Departament,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Departament
    },
    default: {}
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "departament/{id}/",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Departament
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "departament/{id}/",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Departament,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Departament
    },
    default: {}
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "departament/{id}/",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Departament,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Departament
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "departament/{id}/",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
