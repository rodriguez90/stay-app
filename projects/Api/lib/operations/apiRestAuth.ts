/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/apiRestAuthMappers";
import { ConcordiaApiContext } from "../concordiaApiContext";

/** Class representing a ApiRestAuth. */
export class ApiRestAuth {
  private readonly client: ConcordiaApiContext;

  /**
   * Create a ApiRestAuth.
   * @param {ConcordiaApiContext} client Reference to the service client.
   */
  constructor(client: ConcordiaApiContext) {
    this.client = client;
  }

  /**
   * Check the credentials and return the REST Token
   * if the credentials are valid and authenticated.
   * Calls Django Auth login method to register User ID
   * in Django session framework
   *
   * Accept the following POST parameters: username, password
   * Return the REST Framework Token Object's key.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthCreateResponse>
   */
  create(data: Models.Login, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthCreateResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  create(data: Models.Login, callback: msRest.ServiceCallback<Models.Login>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create(data: Models.Login, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Login>): void;
  create(data: Models.Login, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Login>, callback?: msRest.ServiceCallback<Models.Login>): Promise<Models.ApiRestAuthCreateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ApiRestAuthCreateResponse>;
  }

  /**
   * Accepts/Returns nothing.
   * @summary Calls Django logout method and delete the Token object
   * assigned to the current User object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback);
  }

  /**
   * Accepts/Returns nothing.
   * @summary Calls Django logout method and delete the Token object
   * assigned to the current User object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  create1(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  create1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  create1(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  create1(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      create1OperationSpec,
      callback);
  }

  /**
   * Accepts the following POST parameters: new_password1, new_password2
   * Returns the success/fail message.
   * @summary Calls Django Auth SetPasswordForm save method.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthCreate2Response>
   */
  create2(data: Models.PasswordChange, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthCreate2Response>;
  /**
   * @param data
   * @param callback The callback
   */
  create2(data: Models.PasswordChange, callback: msRest.ServiceCallback<Models.PasswordChange>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create2(data: Models.PasswordChange, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PasswordChange>): void;
  create2(data: Models.PasswordChange, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PasswordChange>, callback?: msRest.ServiceCallback<Models.PasswordChange>): Promise<Models.ApiRestAuthCreate2Response> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      create2OperationSpec,
      callback) as Promise<Models.ApiRestAuthCreate2Response>;
  }

  /**
   * Accepts the following POST parameters: email
   * Returns the success/fail message.
   * @summary Calls Django Auth PasswordResetForm save method.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthCreate3Response>
   */
  create3(data: Models.PasswordReset, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthCreate3Response>;
  /**
   * @param data
   * @param callback The callback
   */
  create3(data: Models.PasswordReset, callback: msRest.ServiceCallback<Models.PasswordReset>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create3(data: Models.PasswordReset, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PasswordReset>): void;
  create3(data: Models.PasswordReset, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PasswordReset>, callback?: msRest.ServiceCallback<Models.PasswordReset>): Promise<Models.ApiRestAuthCreate3Response> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      create3OperationSpec,
      callback) as Promise<Models.ApiRestAuthCreate3Response>;
  }

  /**
   * Accepts the following POST parameters: token, uid,
   * new_password1, new_password2
   * Returns the success/fail message.
   * @summary Password reset e-mail link is confirmed, therefore
   * this resets the user's password.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthCreate4Response>
   */
  create4(data: Models.PasswordResetConfirm, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthCreate4Response>;
  /**
   * @param data
   * @param callback The callback
   */
  create4(data: Models.PasswordResetConfirm, callback: msRest.ServiceCallback<Models.PasswordResetConfirm>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create4(data: Models.PasswordResetConfirm, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PasswordResetConfirm>): void;
  create4(data: Models.PasswordResetConfirm, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PasswordResetConfirm>, callback?: msRest.ServiceCallback<Models.PasswordResetConfirm>): Promise<Models.ApiRestAuthCreate4Response> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      create4OperationSpec,
      callback) as Promise<Models.ApiRestAuthCreate4Response>;
  }

  /**
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   * @summary Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthReadResponse>
   */
  read(options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthReadResponse>;
  /**
   * @param callback The callback
   */
  read(callback: msRest.ServiceCallback<Models.UserDetails>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  read(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDetails>): void;
  read(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDetails>, callback?: msRest.ServiceCallback<Models.UserDetails>): Promise<Models.ApiRestAuthReadResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      readOperationSpec,
      callback) as Promise<Models.ApiRestAuthReadResponse>;
  }

  /**
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   * @summary Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthUpdateResponse>
   */
  update(data: Models.UserDetails, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthUpdateResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  update(data: Models.UserDetails, callback: msRest.ServiceCallback<Models.UserDetails>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  update(data: Models.UserDetails, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDetails>): void;
  update(data: Models.UserDetails, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDetails>, callback?: msRest.ServiceCallback<Models.UserDetails>): Promise<Models.ApiRestAuthUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ApiRestAuthUpdateResponse>;
  }

  /**
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   * @summary Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.ApiRestAuthUpdate1Response>
   */
  update1(data: Models.UserDetails, options?: msRest.RequestOptionsBase): Promise<Models.ApiRestAuthUpdate1Response>;
  /**
   * @param data
   * @param callback The callback
   */
  update1(data: Models.UserDetails, callback: msRest.ServiceCallback<Models.UserDetails>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  update1(data: Models.UserDetails, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserDetails>): void;
  update1(data: Models.UserDetails, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserDetails>, callback?: msRest.ServiceCallback<Models.UserDetails>): Promise<Models.ApiRestAuthUpdate1Response> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      update1OperationSpec,
      callback) as Promise<Models.ApiRestAuthUpdate1Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api-rest-auth/login/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Login,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Login
    },
    default: {}
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api-rest-auth/logout/",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const create1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api-rest-auth/logout/",
  responses: {
    201: {},
    default: {}
  },
  serializer
};

const create2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api-rest-auth/password/change/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.PasswordChange,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PasswordChange
    },
    default: {}
  },
  serializer
};

const create3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api-rest-auth/password/reset/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.PasswordReset,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PasswordReset
    },
    default: {}
  },
  serializer
};

const create4OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api-rest-auth/password/reset/confirm/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.PasswordResetConfirm,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PasswordResetConfirm
    },
    default: {}
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api-rest-auth/user/",
  responses: {
    200: {
      bodyMapper: Mappers.UserDetails
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api-rest-auth/user/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.UserDetails,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserDetails
    },
    default: {}
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api-rest-auth/user/",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.UserDetails,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserDetails
    },
    default: {}
  },
  serializer
};
